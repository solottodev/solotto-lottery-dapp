// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// apps/backend/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  email          String          @unique
  password       String
  lotteryConfigs LotteryConfig[] // Backrelation
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model LotteryConfig {
  id                       String       @id @default(uuid())
  tokenMint                String
  tokenDecimals            Int
  snapshotStart            DateTime
  snapshotEnd              DateTime
  drawTime                 DateTime?
  tradePercentage          Float
  status                   ConfigStatus @default(PENDING)
  minUsdLottoRequired      Float        @default(50.0)
  prizeDistributionPercent Float        @default(70.0)
  slippageTolerancePercent Float        @default(0.5)
  blacklist                Json         @default("[]") // âœ… JSON instead of String[]
  createdById              String
  createdBy                User         @relation(fields: [createdById], references: [id])
  createdAt                DateTime     @default(now())
  updatedAt                DateTime     @updatedAt
}

enum ConfigStatus {
  PENDING // Submitted but not validated yet
  VALIDATED // Passed validation checks (e.g., token is SPL, dates valid)
  FAILED // Failed validation (e.g., blacklisted token, invalid mint)
  ACTIVE // In use for a current round
  LOCKED // Frozen during snapshot/draw
  COMPLETED // Finished round
  CANCELED // Manually aborted
}

model Round {
  id                       String        @id @default(uuid())
  startDate                DateTime
  endDate                  DateTime
  drawingDate              DateTime?
  distributionDate         DateTime?
  prizePoolSol             Float
  prizeDistributionPercent Float         @default(70.0)
  prizeSourceWallet        String?
  prizeSourceBalanceSol    Float?
  totalParticipants        Int           @default(0)
  eligibleParticipants     Int           @default(0)
  tierWinners              Json // { t1, t2, t3, t4 }
  tierPayouts              Json // { t1, t2, t3, t4 }
  // Distribution audit fields
  distributionTxSignatures Json?         @default("[]") // string[]
  distributionAtaAddresses Json?         @default("{}") // { t1, t2, t3, t4 }
  swapToLotto              Boolean       @default(false)
  swapRouteId              String?
  swapSlippage             Float?
  createdAt                DateTime      @default(now())
  participants             Participant[]
  snapshots                Snapshot[]
  drawings                 Drawing[]
}

model Participant {
  id               String   @id @default(uuid())
  roundId          String
  wallet           String
  tokenBalance     Float?
  tier             Int?
  eligibilityScore Float?
  isWinner         Boolean  @default(false)
  createdAt        DateTime @default(now())
  round            Round    @relation(fields: [roundId], references: [id], onDelete: Cascade)

  @@index([wallet])
  @@index([createdAt])
}

enum SnapshotStatus {
  IDLE
  RUNNING
  COMPLETED
  CONFIRMED
}

model Snapshot {
  id          String         @id @default(uuid())
  roundId     String
  status      SnapshotStatus @default(IDLE)
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime       @default(now())
  round       Round          @relation(fields: [roundId], references: [id], onDelete: Cascade)
}

enum DrawingStatus {
  IDLE
  RUNNING
  COMPLETED
  CONFIRMED
}

model Drawing {
  id           String        @id @default(uuid())
  roundId      String
  status       DrawingStatus @default(IDLE)
  startedAt    DateTime?
  completedAt  DateTime?
  seed         String?
  vrfRequestId String?
  blockhash    String?
  slot         Int?
  createdAt    DateTime      @default(now())
  round        Round         @relation(fields: [roundId], references: [id], onDelete: Cascade)
}
